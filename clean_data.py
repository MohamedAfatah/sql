import re
import os

def clean_sql_data(input_file, output_file):
    """
    Clean MySQL INSERT data for SQL Server compatibility
    """
    
    print(f"Reading data from: {input_file}")
    
    try:
        with open(input_file, 'r', encoding='utf-8') as file:
            content = file.read()
    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found!")
        return False
    except Exception as e:
        print(f"Error reading file: {e}")
        return False
    
    print("Cleaning data...")
    
    # Step 1: Fix single quotes in text content
    def fix_quotes_in_strings(text):
        """Fix single quotes within string literals"""
        
        # Pattern to match string literals (content between single quotes)
        pattern = r"'([^']*(?:''[^']*)*)'"
        
        def replace_quotes(match):
            content = match.group(1)
            # Replace single quotes with double single quotes, but avoid already escaped ones
            content = re.sub(r"(?<!')('|')(?!')", "''", content)
            return f"'{content}'"
        
        return re.sub(pattern, replace_quotes, text)
    
    # Step 2: Fix common apostrophe issues
    def fix_apostrophes(text):
        """Fix common apostrophe issues in descriptions"""
        replacements = {
            "don't": "don''t",
            "you're": "you''re", 
            "you'll": "you''ll",
            "won't": "won''t",
            "can't": "can''t",
            "isn't": "isn''t",
            "doesn't": "doesn''t",
            "haven't": "haven''t",
            "wouldn't": "wouldn''t",
            "shouldn't": "shouldn''t",
            "couldn't": "couldn''t",
            "it's": "it''s",
            "that's": "that''s",
            "what's": "what''s",
            "here's": "here''s",
            "there's": "there''s",
            "let's": "let''s",
            "we're": "we''re",
            "they're": "they''re",
            "we'll": "we''ll",
            "they'll": "they''ll",
            "I'm": "I''m",
            "I'll": "I''ll",
            "I've": "I''ve",
            "we've": "we''ve",
            "you've": "you''ve",
            "they've": "they''ve"
        }
        
        for original, replacement in replacements.items():
            # Only replace if it's within quotes and not already escaped
            text = re.sub(f"'([^']*){re.escape(original)}([^']*)'", 
                         f"'\\1{replacement}\\2'", text)
        
        return text
    
    # Step 3: Fix specific problematic patterns
    def fix_specific_issues(text):
        """Fix specific issues found in the data"""
        
        # Fix T100, T20, T50 in quotes
        text = re.sub(r"'T(\d+)'", r"''T\1''", text)
        
        # Fix & character in company names
        text = re.sub(r"'([^']*)\s&\s([^']*)'", r"'\1 & \2'", text)
        
        # Fix URLs and special characters
        text = re.sub(r"'([^']*)'s\s", r"'\1''s ", text)
        
        # Fix array syntax
        text = re.sub(r"array:\s*\[\\?'([^']*)'\\?\]", r"array: [''\1'']", text)
        
        # Fix backslashes in strings
        text = text.replace("\\'", "''")
        
        return text
    
    # Step 4: Apply all cleaning functions
    cleaned_content = content
    cleaned_content = fix_apostrophes(cleaned_content)
    cleaned_content = fix_specific_issues(cleaned_content)
    
    # Step 5: Add SQL Server specific syntax
    sql_server_content = f"""-- SQL Server INSERT Script for CombinedAddons
-- Generated by Python cleaning script

-- Enable IDENTITY_INSERT
SET IDENTITY_INSERT CombinedAddons ON;
SET NOCOUNT ON;

-- Begin Transaction for safety
BEGIN TRANSACTION;

-- Insert statements
INSERT INTO CombinedAddons (internal_id, id, additional_details, amount, amount_details, best_seller, billing_cycle, brand_name, description, is_new, limited_offer, processed_at, product_name, run_id, seasonal_offer, segment, url, vat_applicable, vat_included, vat_percentage, vat_percentage_details, validity, coverage_amount, coverage_amount_details, validity_details, minutes, minutes_type, data_allowance, data_allowance_details, data_type, minutes_details, coverage_types) VALUES
{cleaned_content.strip().rstrip(',')};

-- Commit transaction
COMMIT TRANSACTION;

-- Disable IDENTITY_INSERT
SET IDENTITY_INSERT CombinedAddons OFF;
SET NOCOUNT OFF;

-- Verify insertion
SELECT COUNT(*) as 'Records Inserted' FROM CombinedAddons;
"""
    
    # Step 6: Save cleaned content
    try:
        with open(output_file, 'w', encoding='utf-8') as file:
            file.write(sql_server_content)
        
        print(f"✅ Cleaned data saved to: {output_file}")
        print(f"✅ Total size: {len(sql_server_content)} characters")
        
        # Count records
        record_count = len(re.findall(r'^\s*\(\d+,', cleaned_content, re.MULTILINE))
        print(f"✅ Total records: {record_count}")
        
        return True
        
    except Exception as e:
        print(f"Error writing file: {e}")
        return False

def create_sample_input_file():
    """Create a sample input file with the user's data"""
    
    sample_data = """(1, '67c7dc0a1f208d60dd031cc2-CCTV Video Analytics Add-On-4', 'Each analytic report add-on includes features like People Count, Heat Maps, and more.', 49, 'Per analytic report', 'No', 'Monthly', 'eand', 'Analytics add-on: Video Analytics, People Count, Heat Maps, Demographics', 'No', 'No', '2025-03-05 05:07:22', 'CCTV Video Analytics Add-On', 188, 'No', 'business', 'https://www.etisalat.ae/en/smb/products/digital-products/cctv/cctv-cloud-connectivity-4-cameras.html', 'True', 'False', 5, '5% VAT excluded', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(6, '67c7d1f81f208d60dd022e8d-Takaful Personal Accident Cover - AED 100,000-2', 'To subscribe, text \'T100\' to 1012.', 6, 'Monthly fee. VAT excluded.', 'No', 'Monthly', 'eand', 'Accidental life coverage at AED 5.5/month.', 'No', 'No', '2025-03-05 04:24:24', 'Takaful Personal Accident Cover - AED 100,000', 188, 'No', 'consumer', 'https://www.etisalat.ae/en/c/promotions/takaful-offer.html', 'True', 'False', 5, '5% VAT excluded.', '30 Days', 'AED 100,000', 'In the event of death by accident or Permanent Total Disablement (PTD) due to an accident.', 'The cover is valid for 30 days during the policy year for which contribution is paid.', NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(29, '67c7c2af1f208d60dd00c54a-STARZPLAY-0', NULL, 38, '3 Months Free', 'No', 'One-Time', 'eand', 'Dive into unlimited movies, box sets, kids\' shows, and the latest TV series—streaming the same day as in the US.', 'No', 'Yes', '2025-03-05 03:19:11', 'STARZPLAY', 188, 'No', 'consumer', 'https://www.etisalat.ae/b2c/addon/addonsApp/addon/detail?skuId=sku1620331&lang=en', 'True', 'False', 5, '5% VAT excluded', '30 Days', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)"""
    
    with open('mysql_data.txt', 'w', encoding='utf-8') as file:
        file.write(sample_data)
    
    print("✅ Sample input file 'mysql_data.txt' created")

def main():
    """Main function to run the cleaner"""
    
    print("🔧 MySQL to SQL Server Data Cleaner")
    print("=" * 50)
    
    # Check if input file exists
    input_file = 'C:/Users/moham/OneDrive/Desktop/eand_data_mongo_sql/sql/mysql_data.txt'
    output_file = 'sqlserver_data_cleaned.sql'
    
    if not os.path.exists(input_file):
        print(f"⚠️  Input file '{input_file}' not found.")
        create_sample = input("Would you like to create a sample input file? (y/n): ")
        
        if create_sample.lower() == 'y':
            create_sample_input_file()
            print(f"\n📝 Please add your MySQL INSERT data to '{input_file}' and run this script again.")
            return
        else:
            print(f"Please create '{input_file}' with your MySQL INSERT data.")
            return
    
    # Clean the data
    success = clean_sql_data(input_file, output_file)
    
    if success:
        print("\n🎉 Data cleaning completed successfully!")
        print(f"📄 Cleaned SQL Server script saved as: {output_file}")
        print("\n📋 Next steps:")
        print("1. Review the generated SQL file")
        print("2. Run it in SQL Server Management Studio")
        print("3. Check for any remaining syntax errors")
    else:
        print("\n❌ Data cleaning failed. Please check the error messages above.")

if __name__ == "__main__":
    main()